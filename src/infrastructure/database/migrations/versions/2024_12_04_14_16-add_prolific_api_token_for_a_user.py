"""Add prolific API token for a user

Revision ID: ae56b65427a0
Revises: 9cc4ba6a211a
Create Date: 2024-12-04 14:16:06.297086

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ae56b65427a0"
down_revision = "9cc4ba6a211a"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("uq_activity_assignments_activity_flow_respondent_target", table_name="activity_assignments")
    op.drop_index("uq_activity_assignments_activity_respondent_target", table_name="activity_assignments")
    op.drop_table("activity_assignments")
    op.alter_column(
        "answers", "applet_history_id", existing_type=sa.VARCHAR(), type_=sa.Text(), existing_nullable=False
    )
    op.alter_column("answers", "flow_history_id", existing_type=sa.VARCHAR(), type_=sa.Text(), existing_nullable=True)
    op.alter_column(
        "answers", "activity_history_id", existing_type=sa.VARCHAR(), type_=sa.Text(), existing_nullable=False
    )
    op.alter_column(
        "subjects", "language", existing_type=sa.VARCHAR(length=20), type_=sa.String(length=5), existing_nullable=True
    )
    op.alter_column(
        "token_blacklist",
        "type",
        existing_type=postgresql.ENUM("ACCESS", "REFRESH", name="token_purpose"),
        type_=sa.Enum("ACCESS", "REFRESH", name="token_purpose"),
        existing_nullable=False,
    )
    op.add_column("users", sa.Column("prolific_api_token", sa.String(length=127), nullable=True))
    op.alter_column(
        "users", "email", existing_type=sa.VARCHAR(length=100), type_=sa.String(length=56), existing_nullable=True
    )
    op.create_unique_constraint(op.f("uq_users_prolific_api_token"), "users", ["prolific_api_token"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("uq_users_prolific_api_token"), "users", type_="unique")
    op.alter_column(
        "users", "email", existing_type=sa.String(length=56), type_=sa.VARCHAR(length=100), existing_nullable=True
    )
    op.drop_column("users", "prolific_api_token")
    op.alter_column(
        "token_blacklist",
        "type",
        existing_type=sa.Enum("ACCESS", "REFRESH", name="token_purpose"),
        type_=postgresql.ENUM("ACCESS", "REFRESH", name="token_purpose"),
        existing_nullable=False,
    )
    op.alter_column(
        "subjects", "language", existing_type=sa.String(length=5), type_=sa.VARCHAR(length=20), existing_nullable=True
    )
    op.alter_column(
        "answers", "activity_history_id", existing_type=sa.Text(), type_=sa.VARCHAR(), existing_nullable=False
    )
    op.alter_column("answers", "flow_history_id", existing_type=sa.Text(), type_=sa.VARCHAR(), existing_nullable=True)
    op.alter_column(
        "answers", "applet_history_id", existing_type=sa.Text(), type_=sa.VARCHAR(), existing_nullable=False
    )
    op.create_table(
        "activity_assignments",
        sa.Column("is_deleted", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, now())"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, now())"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("migrated_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("migrated_updated", postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
        sa.Column("id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("activity_flow_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("activity_id", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column("respondent_subject_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("target_subject_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["respondent_subject_id"],
            ["subjects.id"],
            name="fk_activity_assignments_respondent_subject_id_subjects",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["target_subject_id"],
            ["subjects.id"],
            name="fk_activity_assignments_target_subject_id_subjects",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_activity_assignments"),
    )
    op.create_index(
        "uq_activity_assignments_activity_respondent_target",
        "activity_assignments",
        ["activity_id", "respondent_subject_id", "target_subject_id"],
        unique=True,
    )
    op.create_index(
        "uq_activity_assignments_activity_flow_respondent_target",
        "activity_assignments",
        ["activity_flow_id", "respondent_subject_id", "target_subject_id"],
        unique=True,
    )
    # ### end Alembic commands ###
